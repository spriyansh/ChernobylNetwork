// Common
    // Create Visuals
    denoise_metadata_ch.map { table_qza, rep_seqs, denoise_stats, metadata -> tuple(table_qza, metadata) } | FeatureTableSummary
    denoise_metadata_ch.map { table_qza, rep_seqs, denoise_stats, metadata -> file(rep_seqs) } | RepSeqTableSummary

    // Assign Sequence
    taxonomy_ch = denoise_metadata_ch.map { table_qza, rep_seqs, denoise_stats, metadata -> rep_seqs } | AssignSequence

    taxonomy_ch_collect = taxonomy_ch.collect()
    viz_tax_input_ch = denoise_metadata_ch.map { denoise_tuple ->
        def taxonomy_file = taxonomy_ch_collect.val[0]
        return denoise_tuple + [taxonomy_file]
    }

    viz_tax_input_ch.map { table_qza, rep_seqs, denoise_stats, metadata, taxon_qza -> tuple(file(table_qza), file(taxon_qza), metadata) } | VisualizeTaxanomy





    // Export feature table to Biom Format
    feature_tab_biom_ch = DeNoize_ch.map { table_qza, rep_seqs, denoise_stats -> tuple(table_qza, "ASV_Feature_Table") } | FeatureTableExport
    taxonomy_ch.map { taxa_qza -> tuple(taxa_qza, "Rep_Sequences") } | RepSeqExport

    //     // Wait for the Feature Table export to biom and wait for the process end
    feature_table = "${params.output_dir}/${params.qiime2_exports_dir}/ASV_Feature_Table/feature-table.biom"
    feature_tab_biom_ch.collect().map { result -> file(feature_table) } | FeatureTabToTSV





    // Downstream Analysis
    phylogenetic_tree_ch = DeNoize_ch.map { table_qza, rep_seqs, denoise_stats -> file(rep_seqs) } | GENERATE_TREE
    phylogenetic_tree_ch.map { aligned_seqs_qza, masked_seq_qza, unrooted_tree_qza, rooted_tree_qza -> tuple(rooted_tree_qza, "Phylogeney/RootedTree") } | RootTreeExport
    phylogenetic_tree_ch.map { aligned_seqs_qza, masked_seq_qza, unrooted_tree_qza, rooted_tree_qza -> tuple(unrooted_tree_qza, "Phylogeney/UnrootedTree") } | UnrootTreeExport

    // Combine Specific Parts of the chanells
    denoise_metadata_ch
        .combine(phylogenetic_tree_ch)
        .map { combined_tuple ->
            def count_tab = combined_tuple[0]
            def metadata = combined_tuple[3]
            def rooted_tree = combined_tuple[7]
            return [count_tab, rooted_tree, metadata]
        }
        .set { phylo_metric_input }

    // // Compute Phylogenetic Metrics
    phylo_metric_ch = phylo_metric_input.map { count_tab, rooted_tree_qza, metadata -> tuple(count_tab, rooted_tree_qza, metadata) } | PHYLOGENEY_METRICS

    // // Compute Alpha Diversity
    // faith_pd_vec = "${params.output_dir}/${params.qiime2_downstream_dir}/core-metrics-results/faith_pd_vector.qza"
    // unw_dist_mat = "${params.output_dir}/${params.qiime2_downstream_dir}/core-metrics-results/unweighted_unifrac_distance_matrix.qza"


    phylo_metric_ch
        .combine(qiime_updated_metadata_ch)
        .set { diversity_ch }

        // diversity_ch.view()


    diversity_ch.map { element ->
        tuple(file(faith_pd_vec), element[1])
    }
        | ALPHA_DIV

    diversity_ch.map { element ->
        tuple(file(unw_dist_mat), element[1])
    }
        | BETA_DIV
